// Generated by gencpp from file following/FollowFeedback.msg
// DO NOT EDIT!


#ifndef FOLLOWING_MESSAGE_FOLLOWFEEDBACK_H
#define FOLLOWING_MESSAGE_FOLLOWFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace following
{
template <class ContainerAllocator>
struct FollowFeedback_
{
  typedef FollowFeedback_<ContainerAllocator> Type;

  FollowFeedback_()
    : progress()  {
    }
  FollowFeedback_(const ContainerAllocator& _alloc)
    : progress(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _progress_type;
  _progress_type progress;





  typedef boost::shared_ptr< ::following::FollowFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::following::FollowFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct FollowFeedback_

typedef ::following::FollowFeedback_<std::allocator<void> > FollowFeedback;

typedef boost::shared_ptr< ::following::FollowFeedback > FollowFeedbackPtr;
typedef boost::shared_ptr< ::following::FollowFeedback const> FollowFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::following::FollowFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::following::FollowFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::following::FollowFeedback_<ContainerAllocator1> & lhs, const ::following::FollowFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.progress == rhs.progress;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::following::FollowFeedback_<ContainerAllocator1> & lhs, const ::following::FollowFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace following

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::following::FollowFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::following::FollowFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::following::FollowFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::following::FollowFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::following::FollowFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::following::FollowFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::following::FollowFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e8180fd8cffb84e555b1c648b3e7287";
  }

  static const char* value(const ::following::FollowFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e8180fd8cffb84eULL;
  static const uint64_t static_value2 = 0x555b1c648b3e7287ULL;
};

template<class ContainerAllocator>
struct DataType< ::following::FollowFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "following/FollowFeedback";
  }

  static const char* value(const ::following::FollowFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::following::FollowFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"string progress\n"
"\n"
;
  }

  static const char* value(const ::following::FollowFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::following::FollowFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.progress);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::following::FollowFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::following::FollowFeedback_<ContainerAllocator>& v)
  {
    s << indent << "progress: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.progress);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOLLOWING_MESSAGE_FOLLOWFEEDBACK_H
